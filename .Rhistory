rarsum<-rarefy(bcitot, 20, MARGIN=2) #species per 20 from whole plot, margin is 2 because bcitot has the data as a column and not a row
plot(spa) #plots the species accumulation curve and the confidence intervals for sites.
spa <- specaccum(BCI)
plot(spa) #plots the species accumulation curve and the confidence intervals for sites.
plot(spa, ci.type="poly", col="blue", lwd=2, ci.lty=0, ci.col="lightblue") #males a prettier plot
spa <- specaccum(BCI,method = "rarefaction")
plot(spa) #plots the species accumulation curve and the confidence intervals for sites.
plot(spa, ci.type="poly", col="blue", lwd=2, ci.lty=0, ci.col="lightblue") #males a prettier plot
spa <- specaccum(BCI)
plot(spa) #plots the species accumulation curve and the confidence intervals for sites.
plot(spa, ci.type="poly", col="blue", lwd=2, ci.lty=0, ci.col="lightblue") #males a prettier plot
spi<-specaccum(BCI, method="rarefaction")
plot(spi)
plot(spa, add=TRUE, col=4) #color number 4 is blue
bc<-vegdist(BCI, method="bray", binary=FALSE) #binary=FALSE means you look at the number of individuals.  TRUE would give the result for presence-absence (Sorenson’s index)
bc
bci.mds<-metaMDS(BCI, distance = "bray", k = 2, trymax = 20, autotransform =TRUE, noshare = 0.1, expand = TRUE, trace = 1, plot = FALSE)
plot(bci.mds, choices = c(1, 2), type="n") #plots the ordination axes
points(bci.mds, display = c("sites", "species"))#displays both sites and species on the same plot.  Try choosing just “sites” to reduce clutter
text(bci.mds, display = c("sites", "species"))
?metaMDS
table<-read.table(file="/Users/alext/Downloads/all_genomes-3.out",header = TRUE, row.names=1,sep="\t")
d<-dist(table)
library("devtools", lib.loc="~/Library/R/3.1/library")
library("Rcpp", lib.loc="~/Library/R/3.1/library")
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","a"),c("b","b"))
test.fun(a)
a<-list(c("a","b"),c("a","c"))
test.fun(a)
a<-list(c("a","b"),c("a","c","d"),c("a","c","e"),c("a","c","f"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","b"),c("a","c","d"),c("a","c","e"),c("a","c","f"))
test.fun(a)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","b"),c("a","c","d"),c("a","c","e"),c("a","c","f"))
test.fun(a)
require(ape)
read.tree(text = test.fun(a))
tree<-read.tree(text = test.fun(a))
tree.string<-test.fun(a)
class(tree.string)
?read.tree
read.tree(text = tree.string)
library("devtools", lib.loc="~/Library/R/3.1/library")
library("Rcpp", lib.loc="~/Library/R/3.1/library")
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","b"),c("a","c","d"),c("a","c","e"),c("a","c","f"))
test.fun(a)
require(ape)
tree.string<-test.fun(a)
class(tree.string)
read.tree(text = tree.string)
remove.packages("anRpackage")
install("Study/Rcpp/anRpackage/")
library("anRpackage", lib.loc="~/Library/R/3.1/library")
a<-list(c("a","b"),c("a","c","d"),c("a","c","e"),c("a","c","f"))
test.fun(a)
require(ape)
tree.string<-test.fun(a)
class(tree.string)
read.tree(text = tree.string)
tree<-read.tree(text = tree.string)
plot(tree)
((100000*64)^2)/2/1024
((100000*64)^2)/2/1024/1024
((100000*64)^2)/2/1024/1024/1024
((100000*64)^2)/2/8/1024/1024/1024
((100000*32)^2)/2/8/1024/1024/1024
2384.186^0.5
161/94
94/161
33/100*60
33.3/100*60
10+14+13+19+18+17
11+17+20+25+23
13+18+20+25+23
13+19+19+25+24+20
3750/66.6
650000/67
52e6/35
install.packages("shiny")
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
shiny::runApp('Developer/DaimondHunt')
db <- dbConnect(SQLite(), dbname="diamonds")
dbSendQuery(conn=db,"create index cut_idx ON diamondlistings (cut);")
dbSendQuery(conn=db,"create index color_idx ON diamondlistings (color);")
dbSendQuery(conn=db,"create index clarity ON diamondlistings (clarity);")
db <- dbConnect(SQLite(), dbname="diamonds")
db
dbSendQuery(conn=db,"create index clarity ON diamondlistings (clarity);")
dbConnect(SQLite(), dbname="diamonds")
ls
getwd()
rm(db)
setwd("~/Developer/DaimondHunt")
db <- dbConnect(SQLite(), dbname="diamonds")
dbSendQuery(conn=db,"create index cut_idx ON diamondlistings (cut);")
dbSendQuery(conn=db,"create index color_idx ON diamondlistings (color);")
dbSendQuery(conn=db,"create index clarity ON diamondlistings (clarity);")
dbDisconnect(db)
shiny::runApp()
shiny::runApp()
colnames(diamonds)
library(ggplot2)
data("diamonds")
colnames(diamonds)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
dbGetQuery(db, paste0("select
carat, cuts.cut, colors.color,
clarities.clarity, depth, `table`, price
from diamondlistings
inner join cuts on cuts.id=diamondlistings.cut
inner join colors on colors.id=diamondlistings.color
inner join clarities on clarities.id=diamondlistings.clarity
)
)
dbGetQuery(db, paste0("select
carat, cuts.cut, colors.color,
clarities.clarity, depth, `table`, price
from diamondlistings
inner join cuts on cuts.id=diamondlistings.cut
inner join colors on colors.id=diamondlistings.color
inner join clarities on clarities.id=diamondlistings.clarity))
)
)
)
)
dbGetQuery(db, paste0("select
carat, cuts.cut, colors.color,
clarities.clarity, depth, `table`, price
from diamondlistings
inner join cuts on cuts.id=diamondlistings.cut
inner join colors on colors.id=diamondlistings.color
inner join clarities on clarities.id=diamondlistings.clarity;"))
db <- dbConnect(SQLite(), dbname="diamonds")
dbGetQuery(db, paste0("select
carat, cuts.cut, colors.color,
clarities.clarity, depth, `table`, price
from diamondlistings
inner join cuts on cuts.id=diamondlistings.cut
inner join colors on colors.id=diamondlistings.color
inner join clarities on clarities.id=diamondlistings.clarity;"))
dbGetQuery(db, "select
carat, cuts.cut, colors.color,
clarities.clarity, depth, `table`, price
from diamondlistings
inner join cuts on cuts.id=diamondlistings.cut
inner join colors on colors.id=diamondlistings.color
inner join clarities on clarities.id=diamondlistings.clarity;")
dbGetQuery("select * from diamiondlistings") %>% head()
dbGetQuery(db,"select * from diamiondlistings") %>% head()
dbGetQuery(db,"select * from diamondlistings") %>% head()
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z)
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z)
library(dplyr)
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z)
library(data.table)
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z)
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z) %>% head()
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% rename(color=id)
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% select(-color) %>% rename(color=id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z) %>% head()
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% mutate(color=id) %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z) %>% head()
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% mutate(color=id) %>% select(-id)
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% mutate(cut=id) %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% mutate(color=id)%>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% mutate(clarity=id) %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z) %>% head()
dbRemoveTable(db, "diamondlistings")
dbSendQuery(conn=db, "create table diamondlistings (
id integer primary key autoincrement,
carat real not null,
cut integer,
color integer,
clarity integer,
depth real not null,
`table` real not null,
price real not null,
x real not null,
y real not null,
z real not null,
foreign key(cut) references cuts(id),
foreign key(color) references colors(id),
foreign key(clarity) references clarities(id)
);")
dbSendQuery(conn=db,"create index carat_idx ON diamondlistings (carat);")
dbSendQuery(conn=db,"create index depth_idx ON diamondlistings (depth);")
dbSendQuery(conn=db,"create index table_idx ON diamondlistings (`table`);")
dbSendQuery(conn=db,"create index price_idx ON diamondlistings (price);")
dbSendQuery(conn=db,"create index cut_idx ON diamondlistings (cut);")
dbSendQuery(conn=db,"create index color_idx ON diamondlistings (color);")
dbSendQuery(conn=db,"create index clarity ON diamondlistings (clarity);")
diamonds %>% mutate(cut=as.character(cut), color=as.character(color), clarity=as.character(clarity))%>%
merge(.,dbReadTable(db,"cuts"),by="cut") %>% mutate(cut=id) %>% select(-id) %>%
merge(.,dbReadTable(db,"colors"),by="color") %>% mutate(color=id)%>% select(-id) %>%
merge(.,dbReadTable(db,"clarities"),by="clarity") %>% mutate(clarity=id) %>% select(-id) %>%
select(carat, cut, color, clarity, depth, table, price, x, y, z) %>%
dbWriteTable(conn = db, "diamondlistings", value =., append=TRUE, row.names=TRUE)
dbGetQuery(db, "select * from diamondlistings")
shiny::runApp()
shiny::runApp()
shiny::runApp()
View(depth.min.max)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colnames(diamonds)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
select_(dl,"color")%>%distinct_("color")
select_(diamonds,"color")%>%distinct_("color")
nrow(select_(diamonds,"color")%>%distinct_("color"))
rainbow(7)
colors(rainbow(7))
install.packages("gplots")
library("gplots")
col2hex(rainbow(7))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
require(devtools)
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
author("DiamondHuntSlides")
library(slidify)
author("DiamondHuntSlides")
author("../DiamondHuntSlides")
setwd("../DiamondHuntSlides/")
getwd()
setwd("~/Developer/")
